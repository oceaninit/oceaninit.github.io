---
layout: post
title:  "mybatis配置"
date:   2017-10-29
categories: mybatis
---

1、导入Jar包

  mybatis: [https://github.com/mybatis/mybatis-3/releases](https://github.com/mybatis/mybatis-3/releases)
  
  mysql-connector: [https://www.mysql.com/products/connector/](https://www.mysql.com/products/connector/)



2、创建数据库及插入数据
```sql
CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(64) NOT NULL DEFAULT '',
  `phone` varchar(16) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
);

INSERT INTO `user` VALUES ('1', 'mybatis', '1234567890');
```

3、定义User类POJO User.java
```java
package com.mybatis.models;

public class User {
    private int id;
    private String name;
    private String phone;
    
    public int getId() {
        return id;
    }
    
    public void setId(int id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getPhone() {
        return phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    @Override
    public String toString() {
        return "User [id=" + id + ", name=" + name + ", phone=" + phone + "]";
    }
    
}
```


3、创建方法接口UserMapper.java

```java
package com.mybatis.mappers;
import com.mybatis.models.User;

public interface UserMapper {
    public User getUser(int id);
}

```

4、定义操作user表的sql映射文件UserMapper.xml
```xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的-->
<mapper namespace="com.mybatis.mappers.UserMapper">
    <!-- 
        parameterType指明查询时使用的参数类型
        resultType指明查询返回的结果集类型
        User类就是user表所对应的实体类
    -->
    <select id="getUser" parameterType="int" resultType="com.mybatis.models.User">
        select * from user where id=#{id}
    </select>
</mapper>
```

5、添加Mybatis配置文件config.xml，配置数据库连接

```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC" />
            <!-- 配置数据库连接信息 -->         
            <!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI -->
            <!-- POOLED 表示支持JDBC数据源连接池 -->
            <!-- UNPOOLED 表示不支持数据源连接池 -->
            <!-- JNDI 表示支持外部数据源连接池 -->
            
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis" />
                <property name="username" value="root" />
                <property name="password" value="***" />  <!-- 数据库密码 -->
            </dataSource>
        </environment>
    </environments>
    
    <mappers>
        <mapper resource="com/mybatis/mappers/UserMapper.xml" />
    </mappers>
    
</configuration>
```

6、查询
```java
package com.mybatis.test;

import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import com.mybatis.models.User;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

public class Test1 {

    public static void main(String[] args) throws IOException {
        //mybatis的配置文件
        String resource = "com/mybatis/config/config.xml";
        //使用MyBatis提供的Resources类加载mybatis的配置文件
        Reader reader = Resources.getResourceAsReader(resource); 
        //构建sqlSession的工厂
        SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(reader);
        //创建能执行映射文件中sql的sqlSession
        SqlSession session = sessionFactory.openSession();
        /**
         * getUser是select标签的id属性值，通过select标签的id属性值就可以找到要执行的SQL
         */
        String statement = "com.mybatis.mappers.UserMapper.getUser";
        try {
            User user = session.selectOne(statement, 1); //查询id为1的User
            System.out.println(user);
        }
        finally {
            session.close();
        }       
    }
}      
```

<!-- 工程结构：
![](https://github.com/oceaninit/oceaninit.github.io/blob/master/pic/mybatis.png)
 -->